
Spectre, Meltdown & Linux

Meltdown & Spectre

Meltdown basics

Spectre basics

Spectre sample code - bad

/* vulnerable function */
int load_array(int *array, unsigned int user_value)
{
	if (user_value >= MAX_ARRAY_ELEMS)
		return 0;

	return array[user_value];
}



Spectre sample code - fixed


/* fixed function */
#include <linux/nospec.h>

int load_array(int *array, unsigned int user_value)
{
	if (user_value >= MAX_ARRAY_ELEMS)
		return 0;

	user_value = array_index_nospec(user_value, MAX_ARRAY_ELEMS);
	return array[user_value];
}




Timeline

	- Publically announced January 3, 2018
		- One week earlier than “planned”
	- First reported by Google to Intel in July, 2017
		- Independantly discovered by different teams after this date
		  due to this being the “next” place to look in the security
		  community
	- Very long embargo
	- 3 Distros were notified in September
	- Some kernel developers learned about Meltdown in October, 2017
	- Kernel security team was never notified


Meltdown fix dates*
	- x86
		- 4.14.11 02 Jan 2018
		- 4.9.75 05 Jan 2018
		- 4.4.110 05 Jan 2018
	- ARM
		- 4.15.4 17 Feb 2018
		- 4.14.20 17 Feb 2018


Spectre fix dates*
	- x86
		- 4.14.14 17 Jan 2018
		- 4.9.77 17 Jan 2018
		- 4.4.113 23 Jan 2018
	- ARM
		- 4.15.4 17 Feb 2018
		- 4.14.21 22 Feb 2018

*fix dates
	- These were the “first” fixes for the vulnerability
	- Later kernel releases got lots of add-on fixes and performance
	  improvements
	- Keep updating your kernel, we are not out of the weeds yet
	- Beware of some enterprise kernels
		- Run your own benchmarks and tests https://imagefactory.otc.t-systems.com/Blog-Review/SpecExLeak/index.html
		- Known holes in some “Kaiser” backports
			- Includes 4.4.y and 4.9.y


Why was this “different”?
	- The “normal” security process was not followed
	- We were forced into “silos” and not allowed to communicate with each
	  other
		- Until 2 weeks from release for Meltdown
		- Until 1 day from release for Spectre
	- Engineers were crippled from talking fully about the problem, even
	  after the release
	- Frustration spilled over onto public lists because of this


Problems because of this
	- Distros have radically different “solutions”
		- Orders of magnitude of speed differences
	- Cloud providers had no solutions for weeks
	- Majority of the world does NOT run “enterprise” kernels
		- Debian and kernel.org releases are far more popular
	- Other open source OSs were not notified
		- BSDs have huge numbers of users


Keeping a secure system

	- Take ALL stable kernel updates
		- Do NOT cherry-pick patches
	- Enable hardening features
	- Update to newer major kernel version when ever possible


